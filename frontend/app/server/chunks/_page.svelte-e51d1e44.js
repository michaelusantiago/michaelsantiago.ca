import { c as create_ssr_component, b as subscribe, d as set_store_value, f as escape, e as add_attribute, h as add_styles, j as each, v as validate_component, k as null_to_empty } from './index-2f2dc0eb.js';
import { s as send_to_id, u as user, c as chats, a as unreadChats, d as admin, e as users, m as client_timezone } from './globalstore-1982b455.js';
import './uneval-c005139b.js';
import { F as Fa, e as faCircle } from './index3-034712df.js';
import PocketBase from 'pocketbase';
import { s as serializeNonPOJ } from './utilities-9e3a1c44.js';
import { e as env } from './env-public-d1489f53.js';

/* src/lib/components/Message.svelte generated by Svelte v3.55.0 */

const css$1 = {
	code: ".from.svelte-t93svn .message.svelte-t93svn,.to.svelte-t93svn .message.svelte-t93svn{color:black;padding:7px 15px ;margin:5px 0;max-width:48%;width:-moz-fit-content;width:fit-content}.from.svelte-t93svn .message .chat-date.svelte-t93svn,.to.svelte-t93svn .message .chat-date.svelte-t93svn{font-size:x-small}.from.svelte-t93svn .message.svelte-t93svn{border-top-left-radius:var(--message-border-radius);border-top-right-radius:var(--message-border-radius);border-bottom-left-radius:var(--message-border-radius);background-color:lightgray;justify-self:right;float:right}.from.svelte-t93svn .message .chat-date.svelte-t93svn{text-align:right}.to.svelte-t93svn .message.svelte-t93svn{border-top-left-radius:var(--message-border-radius);border-top-right-radius:var(--message-border-radius);border-bottom-right-radius:var(--message-border-radius);background-color:lightblue;justify-self:left}.to.svelte-t93svn .message .chat-date.svelte-t93svn{text-align:left}",
	map: null
};

const Message = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let { source } = $$props;
	if ($$props.source === void 0 && $$bindings.source && source !== void 0) $$bindings.source(source);
	$$result.css.add(css$1);

	return `<main><div class="${escape(null_to_empty(source), true) + " svelte-t93svn"}"><div class="${"message svelte-t93svn"}">${slots.message ? slots.message({}) : ``}
            <p class="${"chat-date svelte-t93svn"}">${slots["chat-date"] ? slots["chat-date"]({}) : ``}</p></div></div>
</main>`;
});

/* src/routes/chat/+page.svelte generated by Svelte v3.55.0 */

const css = {
	code: "main.svelte-1s1zzmm.svelte-1s1zzmm{--message-border-radius:20px;display:flex;width:100%;-moz-column-gap:5px;column-gap:5px;height:70vh}.chat-container.svelte-1s1zzmm.svelte-1s1zzmm{flex:2.5;display:grid;grid-template-columns:1fr;grid-template-rows:auto 1fr auto auto auto auto;width:100%;overflow-y:auto}.chat-container.svelte-1s1zzmm .content.svelte-1s1zzmm{grid-column:1 / 1;grid-row:2 / 4;display:grid;grid-template-columns:none;grid-template-rows:1fr auto;overflow-y:auto;border:solid 0.2px #222;border-top-left-radius:7px;border-top-right-radius:7px;padding:5px 10px}.chat-container.svelte-1s1zzmm .content .messages-wrapper.svelte-1s1zzmm{display:grid}.chat-container.svelte-1s1zzmm .friend-is-typing.svelte-1s1zzmm{width:-moz-fit-content;width:fit-content;grid-column:1 / 1;grid-row:3 / 4;border-top-right-radius:15px;background-color:rgba(0, 0, 255, 0.801);padding:5px 10px;font-size:small;z-index:18}.chat-container.svelte-1s1zzmm .new-message.svelte-1s1zzmm{grid-column:1 / 1;grid-row:5 / 5;border:solid 0.2px #222;border-bottom-left-radius:7px;border-bottom-right-radius:7px;padding:10px;outline:none;resize:none}.chat-container.svelte-1s1zzmm .send-btn-wrapper.svelte-1s1zzmm{grid-column:1 / 1;grid-row:6 / 6;display:flex;align-items:center}.chat-container.svelte-1s1zzmm .send-btn-wrapper span.svelte-1s1zzmm{flex:2;padding-left:10px;font-weight:200;font-size:small}.chat-container.svelte-1s1zzmm .send-btn-wrapper .btn-send.svelte-1s1zzmm{background-color:green;border-radius:7px;text-transform:uppercase;float:right;padding:10px 26px;font-size:small;color:white;margin-top:2px;letter-spacing:1px}.chat-container.svelte-1s1zzmm .send-btn-wrapper .btn-send.svelte-1s1zzmm:hover{background-color:rgb(5, 168, 5)}.chat-container.svelte-1s1zzmm .send-btn-wrapper .btn-send.svelte-1s1zzmm:active{background-color:rgb(7, 204, 7)}.chat-container.svelte-1s1zzmm .send-btn-wrapper .btn-send.svelte-1s1zzmm:disabled{background-color:lightgray;color:darkgray}.friends-list.svelte-1s1zzmm.svelte-1s1zzmm{display:grid;grid-template-rows:auto 1fr;grid-row-gap:5px;row-gap:5px;flex:1;border:solid 0.2px #222;border-radius:7px;grid-template-columns:1fr}.friends-list.svelte-1s1zzmm .friends-list-wrapper.svelte-1s1zzmm{overflow-x:auto}.friends-list.svelte-1s1zzmm h3.svelte-1s1zzmm{padding:10px;border-top-left-radius:7px;border-top-right-radius:7px;background-color:whitesmoke}.friends-list.svelte-1s1zzmm ul.svelte-1s1zzmm{padding:10px;font-size:large}.friends-list.svelte-1s1zzmm ul li.svelte-1s1zzmm{border-radius:7px}.friends-list.svelte-1s1zzmm ul li button.svelte-1s1zzmm{padding:5px 10px;display:flex;align-items:center;gap:3px;width:100%;height:100%}.friends-list.svelte-1s1zzmm ul li button .new-messages.svelte-1s1zzmm{font-size:x-small;background-color:gold;color:black;padding:2px 7px;border-radius:10px}.friends-list.svelte-1s1zzmm ul li button.online.svelte-1s1zzmm{font-weight:bold}.friends-list.svelte-1s1zzmm ul li.active.svelte-1s1zzmm,.friends-list.svelte-1s1zzmm ul li.svelte-1s1zzmm:hover{background-color:rgba(102, 108, 104, 0.767);cursor:pointer;transition:background-color ease-out 0.3s}.friends-list.svelte-1s1zzmm ul li.svelte-1s1zzmm:active{background-color:rgba(112, 128, 144, 0.767);cursor:pointer;transition:background-color ease-out 0.3s}",
	map: null
};

const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let $user, $$unsubscribe_user;
	let $chats, $$unsubscribe_chats;
	let $send_to_id, $$unsubscribe_send_to_id;
	let $unreadChats, $$unsubscribe_unreadChats;
	let $admin, $$unsubscribe_admin;
	let $users, $$unsubscribe_users;
	let $client_timezone, $$unsubscribe_client_timezone;
	$$unsubscribe_user = subscribe(user, value => $user = value);
	$$unsubscribe_chats = subscribe(chats, value => $chats = value);
	$$unsubscribe_send_to_id = subscribe(send_to_id, value => $send_to_id = value);
	$$unsubscribe_unreadChats = subscribe(unreadChats, value => $unreadChats = value);
	$$unsubscribe_admin = subscribe(admin, value => $admin = value);
	$$unsubscribe_users = subscribe(users, value => $users = value);
	$$unsubscribe_client_timezone = subscribe(client_timezone, value => $client_timezone = value);
	let { data } = $$props;
	set_store_value(send_to_id, $send_to_id = $user?.role == 1 ? $admin?.id : null, $send_to_id);
	let message_content;
	let message;
	let sendMessageBtn;
	let myFriend = null;
	let me_is_typing = false;
	let friend_is_typing = false;
	const pb = new PocketBase(env.PUBLIC_PB_URI);

	const updateUserIsTyping = async is_typing => {
		try {
			const _user = await pb.collection("users").getOne($user?.id);
			if (_user.is_typing !== is_typing) await pb.collection("users").update($user?.id, { is_typing });
		} catch(error) {
			console.log(error);
		}
	};

	const updateAdminIsChattingTo = async friend_id => {
		try {
			await pb.collection("users").update($admin.id, { is_chatting_to: friend_id });
		} catch(error) {
			console.log(error);
		}
	};

	const updateChatRead = async (friend_id, _user) => {
		let _uc = null;

		try {
			if (_user === 0) {
				_uc = serializeNonPOJ(await pb.collection("chats").getFullList(0, {
					filter: `(from = "${friend_id}") && (to = "${$admin.id}") && (read = false)`,
					sort: "+created"
				}));
			} else {
				_uc = serializeNonPOJ(await pb.collection("chats").getFullList(0, {
					filter: `(from = "${$admin.id}") && (to = "${$user.id}") && (read = false)`,
					sort: "+created"
				}));
			}

			for (let chat of _uc) {
				await pb.collection("chats").update(chat.id, { read: true });
			}
		} catch(error) {
			console.log(error);
		}
	};
	if ($$props.data === void 0 && $$bindings.data && data !== void 0) $$bindings.data(data);
	$$result.css.add(css);

	{
		{
			if ($send_to_id) {
				if (me_is_typing) updateUserIsTyping(me_is_typing);

				setTimeout(
					() => {
						me_is_typing = false;
						updateUserIsTyping(me_is_typing);
					},
					3e3
				);
			}
		}
	}

	{
		{
			if ($send_to_id) {
				myFriend = $users.find(_user => _user.id === $send_to_id);

				if ($user.role === 0) friend_is_typing = myFriend?.is_typing; else {
					if ($user?.id === $admin?.is_chatting_to) {
						friend_is_typing = $admin.is_typing;
					}
				}
			}
		}
	}

	{
		{
			if ($send_to_id) {
				(async () => {
					if ($user?.role == 0) await updateAdminIsChattingTo($send_to_id);
					if ($unreadChats[$send_to_id]) await updateChatRead($send_to_id, $user?.role);
				})();
			}
		}
	}

	$$unsubscribe_user();
	$$unsubscribe_chats();
	$$unsubscribe_send_to_id();
	$$unsubscribe_unreadChats();
	$$unsubscribe_admin();
	$$unsubscribe_users();
	$$unsubscribe_client_timezone();

	return `<main class="${"svelte-1s1zzmm"}">
    <form class="${"chat-container svelte-1s1zzmm"}" method="${"POST"}" action="${"?/send"}">${$user.role === 0
	? `
            ${myFriend
		? `<div class="${"px-2 py-5 font-semibold"}">Me &amp; ${escape(myFriend?.first_name)}</div>`
		: `<div class="${"px-2 py-5 text-red-500"}">Select a friend to chat</div>`}`
	: `<div class="${"px-2 py-5 font-semibold"}">You &amp; ${escape($admin?.first_name)}</div>`}
        <div class="${"content svelte-1s1zzmm"}"${add_attribute("this", message_content, 0)}><div></div> 
            <div class="${"messages-wrapper svelte-1s1zzmm"}">${$chats
	? `${each($chats, chat => {
			return `${validate_component(Message, "Message").$$render(
				$$result,
				{
					source: data?.user.id === chat.from ? "from" : "to"
				},
				{},
				{
					"chat-date": () => {
						return `<span slot="${"chat-date"}" class="${"svelte-1s1zzmm"}">${escape(new Date(chat.created).toLocaleString("en-us", {
							timeZone: $client_timezone,
							dateStyle: "medium",
							timeStyle: "long"
						}))}
                            </span>`;
					},
					message: () => {
						return `<span slot="${"message"}" class="${"svelte-1s1zzmm"}">${escape(chat.message)}</span>`;
					}
				}
			)}`;
		})}`
	: ``}</div></div>
        <div class="${"friend-is-typing svelte-1s1zzmm"}"${add_styles({
		"visibility": friend_is_typing ? "visible" : "hidden"
	})}>${$user?.role === 0
	? `${escape(myFriend?.first_name)} is typing . . .`
	: `${escape($admin?.first_name)} is typing . . .`}</div>
        <textarea class="${"new-message svelte-1s1zzmm"}" name="${"message"}" placeholder="${"type your message here"}"${add_attribute("this", message, 0)}></textarea>
        <input name="${"send_to_id"}" type="${"text"}"${add_attribute("value", $send_to_id, 0)} style="${"display: none"}">
        <div class="${"send-btn-wrapper svelte-1s1zzmm"}"><span class="${"svelte-1s1zzmm"}"></span>
            <button ${"disabled" } class="${"btn-send svelte-1s1zzmm"}"${add_attribute("this", sendMessageBtn, 0)}>SEND</button></div></form>

    
    ${$user?.role == 0
	? `<div class="${"friends-list svelte-1s1zzmm"}"><h3 class="${"text-[#222] text-sm svelte-1s1zzmm"}">Friend&#39;s List</h3>
            <div class="${"friends-list-wrapper svelte-1s1zzmm"}"><ul class="${"svelte-1s1zzmm"}">
                    ${each($users, _user => {
			let color = _user.is_online ? "green" : "lightgray",
				users_full_name = `${_user.first_name} ${_user.last_name}`,
				padded_users_full_name = users_full_name.length > 13
				? users_full_name.substring(0, 13).padEnd(16, ".")
				: users_full_name;

			return `
                        
                        
                        <li${add_attribute("id", _user.id, 0)} class="${["svelte-1s1zzmm", _user.id === $send_to_id ? "active" : ""].join(' ').trim()}"><form method="${"POST"}" action="${"?/get"}"><button class="${["svelte-1s1zzmm", (_user?.is_online) ? "online" : ""].join(' ').trim()}">${validate_component(Fa, "Fa").$$render(
				$$result,
				{
					icon: faCircle,
					scale: "0.75",
					style: `color: ${color}`
				},
				{},
				{}
			)}
                                    <span${add_attribute("title", users_full_name, 0)}>${escape(padded_users_full_name)}</span>
                                    ${$unreadChats[_user.id] && $send_to_id !== _user.id
			? `<span class="${"new-messages svelte-1s1zzmm"}">${escape($unreadChats[_user.id])}</span>`
			: ``}</button>
                                <input name="${"friend_id"}" type="${"text"}"${add_attribute("value", _user.id, 0)} style="${"display: none"}"></form>
                        </li>`;
		})}</ul></div></div>`
	: ``}
</main>`;
});

export { Page as default };
//# sourceMappingURL=_page.svelte-e51d1e44.js.map
